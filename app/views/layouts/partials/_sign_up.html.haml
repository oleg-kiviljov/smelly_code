#sign-up.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "sign-up", role: "dialog", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .panel.panel-info
        .panel-heading
          %h3.panel-title.clearfix
            %span.pull-left
              Sign up
            %button.pull-right.close{"aria-hidden" => "true", "data-dismiss" => "modal", type: "button"}
              %i.fa.fa-times
        .panel-body
          = form_for(User.new, url: user_registration_path(User.new), html: { class: 'form-horizontal' } ) do |f|
            .input-group.form-group
              %span.input-group-addon
                %i.fa.fa-user
              = f.text_field :username, class: 'form-control', placeholder: "Username"
            .input-group.form-group
              %span.input-group-addon
                %i.fa.fa-envelope
              = f.text_field :email, class: 'form-control', placeholder: "Email"
            .input-group.form-group
              %span.input-group-addon
                %i.fa.fa-lock
              = f.password_field :password, class: 'form-control', placeholder: "Password", id: 'sign_up_password'
            .input-group.form-group
              %span.input-group-addon
                %i.fa.fa-lock
                %sup x2
              = f.password_field :password_confirmation, class: 'form-control', placeholder: "Password confirmation"
            .form-group
              = f.submit 'Create account', class: 'btn btn-primary btn-block'

:javascript
  $(document).on("ready page:load", function(){

  // Sign up form validation

  $("#sign-up form").validate({
    rules: {
      "user[username]": {
        required: true,
        maxlength: 20,
        minlength: 4,
        remote: {
          type: 'POST',
          url: "/credentials_already_taken"
        }
  },
  "user[email]": {
      required: true,
      email: true,
      remote: {
      type: 'POST',
      url: "/credentials_already_taken"
      }
  },
  "user[password]": {
      required: true,
      minlength: 8
      },
  "user[password_confirmation]": {
      required: true,
      equalTo: '#sign_up_password'
      }
  },
  messages: {
      "user[username]": {
      required: "Can't be blank",
      maxlength: "Is too long (maximum is 20 characters)",
      minlength: "Is too short (minimum is 4 characters)",
      remote: 'Username is already taken'
      }
  ,
  "user[password]": {
      required: "Can't be blank",
      minlength: "Is too short (minimum is 8 characters)"
      },
  "user[password_confirmation]": {
      required: "Can't be blank",
      equalTo: "Passwords don't match"
      },
  "user[email]": {
      required: "Can't be blank",
      email: "Invalid email",
      remote: 'Email is already taken'
  }
  }, highlight: function(element) {
      $(element).parent('div').removeClass('has-success').addClass('has-error');
    },
    unhighlight: function(element) {
      $(element).parent('div').removeClass('has-error').addClass('has-success');
      $(element).parent('div').next('.label-warning').remove()
    },
    errorPlacement: function(label, element) {
      var $container = $(element).parent('div.form-group');
      $('<span class="label label-warning"></span>').insertAfter($container)
      $container.next('span.label-warning').append(label)
    }


  })

  });




